#!/usr/bin/env python

import argparse
import numpy as np
import os.path
import shutil
import sys

from qir._qir import modis_qir
import qir._modis as modis

def get_parser():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
description="""
Quantitatively restore band 6 of a MODIS granule.  The restored band 6
image will be saved as a MODIS Level 1B HDF file to the file named
RESTORED.""",
epilog="""For example, running the following will save the restored image at
QIR.MYD02HKM.A2010317.1935.005.2010318165656.hdf.

    qir MYD02HKM.A2010317.1935.005.2010318165656.hdf

Running the following will simulate dead detectors on the Terra granule and
save the restored image at output.hdf.

    qir -d 1,4,5,9,11,12,13,14,15,17,18,19 -o output.hdf \\
            MOD02HKM.A2004360.1735.005.2010155130738.hdf
""")
    parser.add_argument('granule', nargs='?',
        help="500m resolution MODIS granule filename.")
    parser.add_argument('-d', dest='detectors',
        help="""comma separated list of band 6 dead detectors
        that overrides the dead detectors specified in
        HDF attribute "Dead Detector List".
        The detectors are between 0 and 19 inclusively.""")
    parser.add_argument('-o', dest='restored',
        help="""output filename of the restored band 6 image saved as MODIS Level 1B HDF file.
        The default is the granule name with the prefix "QIR." added.""")
    parser.add_argument('--version', '-V', action='store_true',
        help="print version and exit.")
    return parser

def main():
    parser = get_parser()
    args = parser.parse_args()

    if args.version:
        from qir import __version__
        print __version__
        sys.exit(2)

    if args.granule is None:
        parser.print_help()
        sys.exit(2)
    if not args.restored:
        _, filename = os.path.split(args.granule)
        args.restored = "QIR."+filename
    if os.path.exists(args.restored):
        print >>sys.stderr, "%s already exists" % args.restored
        sys.exit(2)
    dets = None
    if args.detectors is not None:
        dets = np.array(sorted(set(int(d)
            for d in args.detectors.strip().split(','))), dtype='i')
        if np.any((dets < 0) | (19 < dets)):
            print >>sys.stderr, "invalid detector list:", args.detectors
            sys.exit(2)

    restored = modis_qir(args.granule, b6deaddets=dets).astype('f8')

    shutil.copyfile(args.granule, args.restored)
    g = modis.Level1B(args.restored, mode='w')
    try:
        b = g.radiance(6)
        b.write(restored)
        b.close()
    finally:
        g.close()

if __name__ == '__main__':
    main()
